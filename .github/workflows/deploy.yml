name: Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  ENVIRONMENT_NAME: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP }}
  DEPLOYMENT_NAME: deployment-${{ github.run_number }}
  # Dynamic app names will be set after Bicep deployment

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: |
        cd azure-webapp
        dotnet restore

    - name: Build
      run: |
        cd azure-webapp
        dotnet build --configuration Release --no-restore

    - name: Publish WebApp
      run: |
        cd azure-webapp
        dotnet publish src/WebApp/WebApp.csproj -c Release -o ../webapp-published

    - name: Publish RegistryFunction
      run: |
        cd azure-webapp
        dotnet publish src/RegistryFunction/RegistryFunction.csproj -c Release -o ../registry-function-published

    - name: Publish SampleFunction
      run: |
        cd azure-webapp
        dotnet publish src/SampleFunction/SampleFunction.csproj -c Release -o ../sample-function-published

    - name: Upload WebApp Artifact
      uses: actions/upload-artifact@v4
      with:
        name: webapp
        path: webapp-published

    - name: Upload RegistryFunction Artifact
      uses: actions/upload-artifact@v4
      with:
        name: registry-function
        path: registry-function-published

    - name: Upload SampleFunction Artifact
      uses: actions/upload-artifact@v4
      with:
        name: sample-function
        path: sample-function-published

    - name: Upload Bicep Files
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure
        path: azure-webapp/infrastructure/*.bicep

    - name: Upload Tests
      uses: actions/upload-artifact@v4
      with:
        name: tests
        path: azure-webapp/tests/

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Install Azure Functions Core Tools
      run: |
        npm install -g azure-functions-core-tools@4 --unsafe-perm true

    - name: Install Playwright browsers
      run: |
        cd tests/E2ETests
        dotnet add package Microsoft.Playwright
        dotnet build
        pwsh -c "& dotnet tool install --global Microsoft.Playwright.CLI"
        pwsh -c "& playwright install"

    - name: Setup Azure Storage Emulator
      run: |
        # Use Azurite as a storage emulator
        npm install -g azurite
        mkdir -p azurite
        azurite --silent --location azurite --debug azurite/debug.log &
        echo "Started Azurite storage emulator"
        sleep 5

    - name: Prepare test environment
      run: |
        # Create local.settings.json for Registry Function
        cat > registry-function/local.settings.json << 'EOF'
        {
          "IsEncrypted": false,
          "Values": {
            "AzureWebJobsStorage": "UseDevelopmentStorage=true",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet-isolated",
            "SAMPLE_FUNCTION_URL": "http://localhost:7072"
          },
          "Host": {
            "LocalHttpPort": 7071,
            "CORS": "*",
            "CORSCredentials": false
          }
        }
        EOF

        # Create local.settings.json for Sample Function
        cat > sample-function/local.settings.json << 'EOF'
        {
          "IsEncrypted": false,
          "Values": {
            "AzureWebJobsStorage": "UseDevelopmentStorage=true",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet-isolated"
          },
          "Host": {
            "LocalHttpPort": 7072,
            "CORS": "*",
            "CORSCredentials": false
          }
        }
        EOF

        # Update test settings
        cat > tests/IntegrationTests/appsettings.json << 'EOF'
        {
          "TestSettings": {
            "WebAppBaseUrl": "http://localhost:5000",
            "RegistryFunctionBaseUrl": "http://localhost:7071",
            "SampleFunctionBaseUrl": "http://localhost:7072"
          }
        }
        EOF

        cat > tests/E2ETests/appsettings.json << 'EOF'
        {
          "TestSettings": {
            "WebAppBaseUrl": "http://localhost:5000",
            "RegistryFunctionBaseUrl": "http://localhost:7071",
            "SampleFunctionBaseUrl": "http://localhost:7072",
            "Headless": true,
            "SlowMo": 50,
            "Timeout": 30000
          }
        }
        EOF

    - name: Start WebApp and Functions for testing
      run: |
        # Start WebApp in background
        dotnet webapp/WebApp.dll --urls=http://localhost:5000 &
        echo "Started WebApp"
        
        # Start Registry Function in background
        cd registry-function
        func start --port 7071 &
        echo "Started Registry Function"
        cd ..
        
        # Start Sample Function in background
        cd sample-function
        func start --port 7072 &
        echo "Started Sample Function"
        cd ..
        
        # Give some time for the services to start
        echo "Waiting for services to start..."
        sleep 20
        
        # Check if services are running
        echo "Checking if services are running..."
        curl -s -o /dev/null -w "%{http_code}" http://localhost:5000 || echo "WebApp not responding"
        curl -s -o /dev/null -w "%{http_code}" http://localhost:7071/api/ListFunctions || echo "Registry Function not responding"
        curl -s -o /dev/null -w "%{http_code}" http://localhost:7072/api/SampleEndpoint || echo "Sample Function not responding"

    - name: Run Integration Tests
      run: |
        cd tests/IntegrationTests
        dotnet test --logger "console;verbosity=detailed" || echo "Integration tests failed but continuing"

    - name: Run E2E Tests
      run: |
        cd tests/E2ETests
        dotnet test --logger "console;verbosity=detailed" || echo "E2E tests failed but continuing"

  deploy:
    needs: [build, test]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        enable-AzPSSession: true
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get Resource Names
      id: get_names
      run: |
        echo "WEBAPP_NAME=webapp-${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_ENV
        echo "REGISTRY_NAME=registry-${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_ENV
        echo "SAMPLE_NAME=sample-${{ env.ENVIRONMENT_NAME }}" >> $GITHUB_ENV

    - name: Check if resources exist
      id: check_resources
      run: |
        WEBAPP_EXISTS=$(az webapp show --name ${{ env.WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query id --output tsv 2>/dev/null || echo "false")
        REGISTRY_EXISTS=$(az functionapp show --name ${{ env.REGISTRY_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query id --output tsv 2>/dev/null || echo "false")
        SAMPLE_EXISTS=$(az functionapp show --name ${{ env.SAMPLE_NAME }} --resource-group ${{ env.RESOURCE_GROUP_NAME }} --query id --output tsv 2>/dev/null || echo "false")
        
        if [[ "$WEBAPP_EXISTS" == "false" || "$REGISTRY_EXISTS" == "false" || "$SAMPLE_EXISTS" == "false" ]]; then
          echo "Some resources don't exist, deploying infrastructure"
          echo "DEPLOY_INFRA=true" >> $GITHUB_ENV
        else
          echo "All resources exist, skipping infrastructure deployment"
          echo "DEPLOY_INFRA=false" >> $GITHUB_ENV
        fi

    - name: Deploy Bicep template
      uses: azure/arm-deploy@v1
      if: env.DEPLOY_INFRA == 'true'
      with:
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: ./infrastructure/main.bicep
        parameters: environmentName=${{ env.ENVIRONMENT_NAME }} webAppName=${{ env.WEBAPP_NAME }} registryFunctionName=${{ env.REGISTRY_NAME }} sampleFunctionName=${{ env.SAMPLE_NAME }}
        deploymentName: ${{ env.DEPLOYMENT_NAME }}
        deploymentMode: 'Incremental'

    # Wait for resource provisioning only if we deployed new infrastructure
    - name: Wait for resource provisioning
      if: env.DEPLOY_INFRA == 'true'
      run: |
        echo "Waiting for resources to be fully provisioned..."
        sleep 30

    - name: Deploy WebApp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.WEBAPP_NAME }}
        package: ./webapp
        deployment-name: ${{ env.DEPLOYMENT_NAME }}-webapp

    - name: Deploy Registry Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.REGISTRY_NAME }}
        package: ./registry-function
        deployment-name: ${{ env.DEPLOYMENT_NAME }}-registry

    - name: Deploy Sample Function
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.SAMPLE_NAME }}
        package: ./sample-function
        deployment-name: ${{ env.DEPLOYMENT_NAME }}-sample
